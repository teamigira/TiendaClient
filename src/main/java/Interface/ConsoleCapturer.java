/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author Nkanabo
 */
public class ConsoleCapturer extends javax.swing.JPanel {

    /**
     * Creates new form ConsoleCapturer
     */
    private final JTextArea consoleTextArea;

    public ConsoleCapturer(JTextArea consoleTextArea) {
        this.consoleTextArea = consoleTextArea;
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public synchronized void flush() {
        String message = toString().trim();
        if (!message.isEmpty()) {
            consoleTextArea.append(message + "\n");
            consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
            reset(); // Clear the buffer after printing
        }
    }

    public void captureConsoleOutput() {
        // Redirect standard output stream to this stream
        PrintStream printStream = new PrintStream(new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                consoleTextArea.append(String.valueOf((char) b));
            }
        }, true);
        System.setOut(printStream);
    }
    
    public synchronized void reset() {
    // Clear the internal buffer or reset any relevant state
    }

public static void main(String[] args) {
    // Example usage
    JTextArea consoleTextArea = new JTextArea(10, 40);
    ConsoleCapturer capturer = new ConsoleCapturer(consoleTextArea);
    capturer.captureConsoleOutput();

    // Create a JFrame to hold the JTextArea
    JFrame frame = new JFrame("Console Output");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.add(new JScrollPane(consoleTextArea));
    frame.pack();
    frame.setVisible(true);

    // Simulate some console output
    System.out.println("System setup started...");
    System.out.println("Loading configuration...");
    System.out.println("Connecting to database...");
    System.out.println("Database connection successful.");
    System.out.println("Initializing components...");

    // Keep the program running until the user closes the window
    while (true) {
        try {
            Thread.sleep(1000); // Sleep for 1 second to avoid CPU hogging
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }
}

}
